#ifndef EVALUATION_CPP // GUARD
#define EVALUATION_CPP // GUARD

#include "Evaluation.hpp"
//#include "globals.cpp"

// Constructor:
Evaluation::Evaluation() {}

// Evaluate:
int Evaluation::evaluate(Board &board) {
  int score = 0;
  for (Color color = WHITE; color <= BLACK; color = (Color) (color + 1)) {
    int color_multiplier = color == WHITE ? 1 : -1;
    for (Piece piece = PAWN; piece <= KING; piece = (Piece) (piece + 1)) {
      bitboard piece_positions = board.get_piece_positions(piece, color);
      while (piece_positions) {
	score += color_multiplier * (piece_values[piece] +  piece_square_tables[color][piece][lsb(piece_positions)]);
	piece_positions &= piece_positions - 1;
      }
    }
  }

  return score;
}

// Piece Values:
const uint16_t Evaluation::piece_values[6] = {
  100, // PAWN
  320, // KNIGHT
  330, // BISHOP
  500, // ROOK
  900, // QUEEN
  20000 // KING
};

// Piece Square Tables:
const int8_t Evaluation::piece_square_tables[2][6][64] = {
  { // WHITE
    { // PAWN
      0, 0, 0, 0, 0, 0, 0, 0,
      5, 10, 10, -20, -20, 10, 10, 5,
      5, -5, -10, 0, 0, -10, -5, 5,
      0, 0, 0, 20, 20, 0, 0, 0,
      5, 5, 10, 25, 25, 10, 5, 5,
      10, 10, 20, 30, 30, 20, 10, 10,
      50, 50, 50, 50, 50, 50, 50, 50,
      0, 0, 0, 0, 0, 0, 0, 0
    },
    { // KNIGHT
      -50, -40, -30, -30, -30, -30, -40, -50,
      -40, -20, 0, 5, 5, 0, -20, -40,
      -30, 5, 10, 15, 15, 10, 5, -30,
      -30, 0, 15, 20, 20, 15, 0, -30,
      -30, 5, 15, 20, 20, 15, 5, -30,
      -30, 0, 10, 15, 15, 10, 0, -30,
      -40, -20, 0, 0, 0, 0, -20, -40,
      -50, -40, -30, 30, -30, -30, -40, -50
    },
    { // BISHOP
      -20, -10, -10, -10, -10, -10, -10, -20,
      -10,  0,  0,  0,  0,  0,  0, -10,
      -10,  0,  5, 10, 10,  5,  0, -10,
      -10,  5,  5, 10, 10,  5,  5, -10,
      -10,  0, 10, 10, 10, 10,  0, -10,
      -10, 10, 10, 10, 10, 10, 10, -10,
      -10,  5,  0,  0,  0,  0,  5, -10,
      -20, -10, -10, -10, -10, -10, -10, -20
    },
    { // ROOK
      0, 0, 0, 5, 5, 0, 0, 0,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      5, 10, 10, 10, 10, 10, 10, 5,
      0, 0, 0, 0, 0, 0, 0, 0
    },
    { // QUEEN
      -20, -10, -10, -5, -5, -10, -10, -20
      -10,  0,  5,  0,  0,  0,  0, -10,
      -10,  5,  5,  5,  5,  5,  0, -10,
      0,  0,  5,  5,  5,  5,  0, -5,
      -5,  0,  5,  5,  5,  5,  0, -5,
      -10,  0,  5,  5,  5,  5,  0, -10,
      -10,  0,  0,  0,  0,  0,  0, -10,
      -20, -10, -10, -5, -5, -10, -10, -20
    },
    { // KING
      20, 30, 10,  0,  0, 10, 30, 20,
      20, 20,  0,  0,  0,  0, 20, 20,
      -10, -20, -20, -20, -20, -20, -20, -10, 
      -20, -30, -30, -40, -40, -30, -30, -20, 
      -30, -40, -40, -50, -50, -40, -40, -30, 
      -30, -40, -40, -50, -50, -40, -40, -30, 
      -30, -40, -40, -50, -50, -40, -40, -30, 
      -30, -40, -40, -50, -50, -40, -40, -30
    }
  },
  { // BLACK
    { // PAWN
      0, 0, 0, 0, 0, 0, 0, 0,
      50, 50, 50, 50, 50, 50, 50, 50,
      10, 10, 20, 30, 30, 20, 10, 10,
      5, 5, 10, 25, 25, 10, 5, 5,
      0, 0, 0, 20, 20, 0, 0, 0,
      5, -5, -10, 0, 0, -10, -5, 5,
      5, 10, 10, -20, -20, 10, 10, 5,
      0, 0, 0, 0, 0, 0, 0, 0,
    },
    { // KNIGHT
      -50, -40, -30, 30, -30, -30, -40, -50,
      -40, -20, 0, 0, 0, 0, -20, -40,
      -30, 0, 10, 15, 15, 10, 0, -30,
      -30, 5, 15, 20, 20, 15, 5, -30,
      -30, 0, 15, 20, 20, 15, 0, -30,
      -30, 0, 10, 15, 15, 10, 0, -30,
      -40, -20, 0, 5, 5, 0, -20, -40,
      -50, -40, -30, -30, -30, -30, -40, -50,
    },
    { // BISHOP
      -20, -10, -10, -10, -10, -10, -10, -20,
      -10,  5,  0,  0,  0,  0,  5, -10,
      -10, 10, 10, 10, 10, 10, 10, -10,
      -10,  0, 10, 10, 10, 10,  0, -10,
      -10,  5,  5, 10, 10,  5,  5, -10,
      -10,  0,  5, 10, 10,  5,  0, -10,
      -10,  0,  0,  0,  0,  0,  0, -10,
      -20, -10, -10, -10, -10, -10, -10, -20,
    },
    { // ROOK
      0, 0, 0, 0, 0, 0, 0, 0,
      5, 10, 10, 10, 10, 10, 10, 5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      -5, 0, 0, 0, 0, 0, 0, -5,
      0, 0, 0, 5, 5, 0, 0, 0
    },
    { // QUEEN
      -20, -10, -10, -5, -5, -10, -10, -20,
      -10,  0,  0,  0,  0,  0,  0, -10,
      -10,  0,  5,  5,  5,  5,  0, -10,
      -5,  0,  5,  5,  5,  5,  0, -5,
      0,  0,  5,  5,  5,  5,  0, -5,
      -10,  5,  5,  5,  5,  5,  0, -10,
      -10,  0,  5,  0,  0,  0,  0, -10,
      -20, -10, -10, -5, -5, -10, -10, -20
    },
    { // KING
      -30, -40, -40, -50, -50, -40, -40, -30,
      -30, -40, -40, -50, -50, -40, -40, -30,
      -30, -40, -40, -50, -50, -40, -40, -30,
      -30, -40, -40, -50, -50, -40, -40, -30,
      -20, -30, -30, -40, -40, -30, -30, -20,
      -10, -20, -20, -20, -20, -20, -20, -10,
      20, 20,  0,  0,  0,  0, 20, 20,
      20, 30, 10,  0,  0, 10, 30, 20,
    }
  }
};

/*
 * Pawn piece-square table:
 * 0,  0,  0,  0,  0,  0,  0,  0,
 * 50, 50, 50, 50, 50, 50, 50, 50,
 * 10, 10, 20, 30, 30, 20, 10, 10,
 * 5,  5, 10, 25, 25, 10,  5,  5,
 * 0,  0,  0, 20, 20,  0,  0,  0,
 * 5, -5, -10,  0,  0, -10, -5,  5,
 * 5, 10, 10, -20, -20, 10, 10,  5,
 * 0,  0,  0,  0,  0,  0,  0,  0
 */
const int8_t pawn_square_table[2][64] = {
  {
    0, 0, 0, 0, 0, 0, 0, 0,
    5, 10, 10, -20, -20, 10, 10, 5,
    5, -5, -10, 0, 0, -10, -5, 5,
    0, 0, 0, 20, 20, 0, 0, 0,
    5, 5, 10, 25, 25, 10, 5, 5,
    10, 10, 20, 30, 30, 20, 10, 10,
    50, 50, 50, 50, 50, 50, 50, 50,
    0, 0, 0, 0, 0, 0, 0, 0
  },
  {
    0, 0, 0, 0, 0, 0, 0, 0,
    50, 50, 50, 50, 50, 50, 50, 50,
    10, 10, 20, 30, 30, 20, 10, 10,
    5, 5, 10, 25, 25, 10, 5, 5,
    0, 0, 0, 20, 20, 0, 0, 0,
    5, -5, -10, 0, 0, -10, -5, 5,
    5, 10, 10, -20, -20, 10, 10, 5,
    0, 0, 0, 0, 0, 0, 0, 0,
  }
};

/*
 * Knight piece-square table:
 * -50,-40,-30,-30,-30,-30,-40,-50,
 * -40,-20,  0,  0,  0,  0,-20,-40,
 * -30,  0, 10, 15, 15, 10,  0,-30,
 * -30,  5, 15, 20, 20, 15,  5,-30,
 * -30,  0, 15, 20, 20, 15,  0,-30,
 * -30,  5, 10, 15, 15, 10,  5,-30,
 * -40,-20,  0,  5,  5,  0,-20,-40,
 * -50,-40,-30,-30,-30,-30,-40,-50,
 */
const int8_t knight_square_table[2][64] = {
  {
    -50, -40, -30, -30, -30, -30, -40, -50,
    -40, -20, 0, 5, 5, 0, -20, -40,
    -30, 5, 10, 15, 15, 10, 5, -30,
    -30, 0, 15, 20, 20, 15, 0, -30,
    -30, 5, 15, 20, 20, 15, 5, -30,
    -30, 0, 10, 15, 15, 10, 0, -30,
    -40, -20, 0, 0, 0, 0, -20, -40,
    -50, -40, -30, 30, -30, -30, -40, -50
  },
  {
    -50, -40, -30, 30, -30, -30, -40, -50,
    -40, -20, 0, 0, 0, 0, -20, -40,
    -30, 0, 10, 15, 15, 10, 0, -30,
    -30, 5, 15, 20, 20, 15, 5, -30,
    -30, 0, 15, 20, 20, 15, 0, -30,
    -40, -20, 0, 5, 5, 0, -20, -40,
    -50, -40, -30, -30, -30, -30, -40, -50,
  }
};


/*
 * Bishop piece-square table:
 * -20,-10,-10,-10,-10,-10,-10,-20,
 * -10,  0,  0,  0,  0,  0,  0,-10,
 * -10,  0,  5, 10, 10,  5,  0,-10,
 * -10,  5,  5, 10, 10,  5,  5,-10,
 * -10,  0, 10, 10, 10, 10,  0,-10,
 * -10, 10, 10, 10, 10, 10, 10,-10,
 * -10,  5,  0,  0,  0,  0,  5,-10,
 * -20,-10,-10,-10,-10,-10,-10,-20,
 */
const int8_t bishop_square_table[2][64] = {
  {
    -20, -10, -10, -10, -10, -10, -10, -20,
    -10,  0,  0,  0,  0,  0,  0, -10,
    -10,  0,  5, 10, 10,  5,  0, -10,
    -10,  5,  5, 10, 10,  5,  5, -10,
    -10,  0, 10, 10, 10, 10,  0, -10,
    -10, 10, 10, 10, 10, 10, 10, -10,
    -10,  5,  0,  0,  0,  0,  5, -10,
    -20, -10, -10, -10, -10, -10, -10, -20
  },
  {
    -20, -10, -10, -10, -10, -10, -10, -20,
    -10,  5,  0,  0,  0,  0,  5, -10,
    -10, 10, 10, 10, 10, 10, 10, -10,
    -10,  0, 10, 10, 10, 10,  0, -10,
    -10,  5,  5, 10, 10,  5,  5, -10,
    -10,  0,  5, 10, 10,  5,  0, -10,
    -10,  0,  0,  0,  0,  0,  0, -10,
    -20, -10, -10, -10, -10, -10, -10, -20,
  }
};


/*
 * Rook piece-square table:
 * 0,  0,  0,  0,  0,  0,  0,  0,
 * 5, 10, 10, 10, 10, 10, 10,  5,
 * -5,  0,  0,  0,  0,  0,  0, -5,
 * -5,  0,  0,  0,  0,  0,  0, -5,
 * -5,  0,  0,  0,  0,  0,  0, -5,
 * -5,  0,  0,  0,  0,  0,  0, -5,
 * -5,  0,  0,  0,  0,  0,  0, -5,
 * 0,  0,  0,  5,  5,  0,  0,  0
*/
const int8_t rook_square_table[2][64] = {
  {
    0, 0, 0, 5, 5, 0, 0, 0
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    5, 10, 10, 10, 10, 10, 10, 5,
    0, 0, 0, 0, 0, 0, 0, 0
  },
  {
    0, 0, 0, 0, 0, 0, 0, 0,
    5, 10, 10, 10, 10, 10, 10, 5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    -5, 0, 0, 0, 0, 0, 0, -5,
    0, 0, 0, 5, 5, 0, 0, 0
  }
};

/*
 * Queen piece-square table:
 * -20,-10,-10, -5, -5,-10,-10,-20,
 * -10,  0,  0,  0,  0,  0,  0,-10,
 * -10,  0,  5,  5,  5,  5,  0,-10,
 * -5,  0,  5,  5,  5,  5,  0, -5,
 *  0,  0,  5,  5,  5,  5,  0, -5,
 * -10,  5,  5,  5,  5,  5,  0,-10,
 * -10,  0,  5,  0,  0,  0,  0,-10,
 * -20,-10,-10, -5, -5,-10,-10,-20
*/

const int8_t queen_square_table[2][64] = {
  {
    -20, -10, -10, -5, -5, -10, -10, -20
    -10,  0,  5,  0,  0,  0,  0, -10,
    -10,  5,  5,  5,  5,  5,  0, -10,
    0,  0,  5,  5,  5,  5,  0, -5,
    -5,  0,  5,  5,  5,  5,  0, -5,
    -10,  0,  5,  5,  5,  5,  0, -10,
    -10,  0,  0,  0,  0,  0,  0, -10,
    -20, -10, -10, -5, -5, -10, -10, -20
  },
  {
    -20, -10, -10, -5, -5, -10, -10, -20,
    -10,  0,  0,  0,  0,  0,  0, -10,
    -10,  0,  5,  5,  5,  5,  0, -10,
    -5,  0,  5,  5,  5,  5,  0, -5,
    0,  0,  5,  5,  5,  5,  0, -5,
    -10,  5,  5,  5,  5,  5,  0, -10,
    -10,  0,  5,  0,  0,  0,  0, -10,
    -20, -10, -10, -5, -5, -10, -10, -20
  }
};


/*
 * King piece-square table.
 * -30,-40,-40,-50,-50,-40,-40,-30,
 * -30,-40,-40,-50,-50,-40,-40,-30,
 * -30,-40,-40,-50,-50,-40,-40,-30,
 * -30,-40,-40,-50,-50,-40,-40,-30,
 * -20,-30,-30,-40,-40,-30,-30,-20,
 * -10,-20,-20,-20,-20,-20,-20,-10,
 * 20, 20,  0,  0,  0,  0, 20, 20,
 * 20, 30, 10,  0,  0, 10, 30, 20
 */
const int8_t king_square_table[2][64] = {
  {
    20, 30, 10,  0,  0, 10, 30, 20,
    20, 20,  0,  0,  0,  0, 20, 20,
    -10, -20, -20, -20, -20, -20, -20, -10, 
    -20, -30, -30, -40, -40, -30, -30, -20, 
    -30, -40, -40, -50, -50, -40, -40, -30, 
    -30, -40, -40, -50, -50, -40, -40, -30, 
    -30, -40, -40, -50, -50, -40, -40, -30, 
    -30, -40, -40, -50, -50, -40, -40, -30
  },
  {
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -20, -30, -30, -40, -40, -30, -30, -20,
    -10, -20, -20, -20, -20, -20, -20, -10,
    20, 20,  0,  0,  0,  0, 20, 20,
    20, 30, 10,  0,  0, 10, 30, 20,
  }
};


#endif
